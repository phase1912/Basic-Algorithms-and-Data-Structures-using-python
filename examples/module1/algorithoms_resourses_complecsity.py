#Просторова складність #O(1). Алгоритм використовує сталий обсяг пам'яті,
# незалежно від розміру вхідних даних. Наприклад, отримання елемента з масиву за індексом:

def get_item_by_index(items, index):
  return items[index]

#Просторова складність O(n). Алгоритм використовує обсяг пам'яті, пропорційний розміру вхідних даних.
# Це найчастіше трапляється, коли ми створюємо копію вхідних даних або зберігаємо проміжні результати. Наприклад операція обернення списку:

def reverse_list(items):
  return items[::-1]

#Просторова складність O(n^2). Алгоритм використовує обсяг пам'яті,
# пропорційний квадрату розміру вхідних даних. Це часто трапляється при роботі з масивами, що створюються динамічно.
# Наприклад, створення списку всіх пар елементів:

def generate_pairs(items):
  return [(items[i], items[j]) for i in range(len(items)) for j in range(i+1, len(items))]

items = [1, 2, 3, 4]
print(generate_pairs(items))